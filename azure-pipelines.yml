resources:
- repo: self
variables:
  BuildPlatform: 'Any CPU'
jobs:
- job: Compile
  displayName: Compile
  pool:
    name: Hosted VS2017
    demands: 
    - msbuild
    - visualstudio
    - azureps
  steps:
  - powershell: |
     # Set variables
     $azureStorageBaseDirectory = "Resources\$(system.teamProject)"
     $projectLocalPath = "$(System.DefaultWorkingDirectory)\$(system.teamProject)"
     $devTestLabsLocalPath = "$(Build.ArtifactStagingDirectory)\DevTestLabs"
     $buildResourcesLocalPath = "$(Build.ArtifactStagingDirectory)\BuildPipeline"
     
     # Create the DevTestLabs directory if it doesn't exist
     if ((Test-Path -Path $devTestLabsLocalPath -PathType Container) -eq $false) {
         New-Item -ItemType Directory -Path $devTestLabsLocalPath
     }
     
     # Create the Build pipeline directory if it doesn't exist
     if ((Test-Path -Path $buildResourcesLocalPath -PathType Container) -eq $false) {
         New-Item -ItemType Directory -Path $buildResourcesLocalPath
     }
     
     Write-Output ("Copy files to build $(system.teamProject) from Azure storage account")
     $azureContext = New-AzureStorageContext $(AzureStorageAccountName) $(AzureStorageAccountKey)
     $azureShare = Get-AzureStorageShare $(AzureStorageShareName) –Context $azureContext
     Get-AzureStorageFileContent –Share $azureShare –Path "$azureStorageBaseDirectory\$(system.teamProject).snk" "$projectLocalPath\$(system.teamProject).snk"
     Get-AzureStorageFileContent –Share $azureShare –Path "$azureStorageBaseDirectory\SharePoint 2013\Microsoft.SharePoint.dll" "$projectLocalPath\Microsoft.SharePoint.dll"
     
     Write-Output ("Copy DevTestLabs content from Azure storage account")
     $localPath = Join-Path -Path $azureStorageBaseDirectory -ChildPath "DevTestLabs"
     Get-AzureStorageFile -ShareName $(AzureStorageShareName) -Context $azureContext -Path $localPath | Get-AzureStorageFile | ?{$_.GetType().Name -eq "CloudFile"} | Get-AzureStorageFileContent -Destination $devTestLabsLocalPath
     
     Write-Output ("Copy BuildResources content from Azure storage account")
     $localPath = Join-Path -Path $azureStorageBaseDirectory -ChildPath "BuildPipeline"
     Get-AzureStorageFile -ShareName $(AzureStorageShareName) -Context $azureContext -Path $localPath | Get-AzureStorageFile | ? {$_.GetType().Name -eq "CloudFile"} | Get-AzureStorageFileContent -Destination $buildResourcesLocalPath
     
     Write-Output ("Add assembly Microsoft.SharePoint.dll to the GAC")
     [System.Reflection.Assembly]::Load("System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")
     $publish = New-Object System.EnterpriseServices.Internal.Publish
     $publish.GacInstall("$projectLocalPath\Microsoft.SharePoint.dll")
     
    displayName: 'Import resources from Azure storage account'
  - task: NuGetToolInstaller@0
    displayName: 'Use NuGet 4.4.1'
    inputs:
      versionSpec: 4.4.1
  
  - task: NuGetCommand@2
    displayName: 'NuGet restore'
    inputs:
      restoreSolution: '$(Parameters.solution)'

  - task: bleddynrichards.Assembly-Info-Task.Assembly-Info-Task.Assembly-Info-Task@1
    displayName: 'Set $(system.teamProject).dll version'
    inputs:
      FileNames: |
       AssemblyInfo.cs
      Title: $(system.teamProject)
      Product: $(system.teamProject)
      Description: 'This claims provider connects SharePoint with Active Directory and LDAP servers to provide a great search experience in the people picker with federated authentication'
      Company: GitHub.com/Yvand
      Copyright: 'Copyright © $(date:yyyy), Yvan Duhamel, All rights reserved'
      Trademark: $(system.teamProject)
      VersionNumber: 1.0.0.0
      FileVersionNumber: '$(BuildVersion).*.*'
      InformationalVersion: 1.0.0.0

  - task: VSBuild@1
    displayName: 'Build $(system.teamProject) solution'
    inputs:
      solution: '$(Parameters.solution)'
      msbuildArgs: '/p:IsPackaging=true'
      platform: '$(BuildPlatform)'
      configuration: '$(BuildConfiguration)'
      msbuildArchitecture: x64
  
  - task: CopyFiles@2
    displayName: 'Copy binaries to artifacts'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)'
      Contents: '**/$(BuildConfiguration)/**/?(*.wsp|*.dll|*.pdb)'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifact: drop'
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop
  
- job: CreateTestEnvironment
  displayName: Create test environment
  timeoutInMinutes: 90
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: ms-azuredevtestlabs.tasks.azure-dtl-task-createEnvironment.AzureDevTestLabsCreateEnvironment@1
    displayName: 'Create Azure DevTest Labs Environment'
    inputs:
      ConnectedServiceName: '$(Test.AzureConnectionName)'
      LabId: '/subscriptions/$(Test.AzureSubscriptionId)/resourceGroups/$(Test.DevTestLabName)/providers/Microsoft.DevTestLab/labs/$(Test.DevTestLabName)'
      RepositoryId: '/subscriptions/$(Test.AzureSubscriptionId)/resourcegroups/$(Test.DevTestLabName)/providers/microsoft.devtestlab/labs/$(Test.DevTestLabName)/artifactsources/privaterepo897'
      TemplateId: '/subscriptions/$(Test.AzureSubscriptionId)/resourceGroups/$(Test.DevTestLabName)/providers/Microsoft.DevTestLab/labs/$(Test.DevTestLabName)/artifactSources/privaterepo897/armTemplates/SharePoint-ADFS-DevTestLabs'
      EnvironmentName: 'IntegrationTests'
      ParameterOverrides: "-location 'west europe' -provisionSharePoint2013 '$(Test.ProvisionSharePoint2013)' -provisionSharePoint2016 '$(Test.ProvisionSharePoint2016)' -provisionSharePoint2019 '$(Test.ProvisionSharePoint2019)' -enableHybridBenefitServerLicenses 'Yes' -adminUserName '$(Test.AdminUserName)' -adminPassword '$(Test.AdminPassword)' -serviceAccountsPassword '$(Test.ServiceAccountsPassword)'"
      TemplateOutputVariables: true
      ExportEnvironmentTemplate: true
    timeoutInMinutes: 90
  
- job: ApplyArtifactsSP2013
  condition: and(succeeded(), eq(variables['DevTestLabProvisionSharePoint2013'], 'yes'))
  dependsOn: 
  - Compile
  - CreateTestEnvironment
  displayName: Apply artifacts on SP2013
  timeoutInMinutes: 30
  variables:
    jobSharePointVersion: 2013
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)

  - task: AzurePowerShell@3
    displayName: 'Apply artifact 7-zip'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Public Repo" -ArtifactName "windows-7zip"'
      preferredAzurePowerShellVersion: 5.1.1
    enabled: false

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Azure Pipelines Agent"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Yvand/AzureRM-Templates" -ArtifactName "windows-vsts-build-agent" -param_vstsAccount "YvanDev" -param_vstsPassword "$(AccessTokenDevOpsYvand)" -param_poolName "$(system.teamProject)-Tests-$(jobSharePointVersion)" -param_windowsLogonAccount "contoso\$(Test.AdminUserName)" -param_windowsLogonPassword "$(Test.AdminPassword)" -param_agentName "SP$(jobSharePointVersion)" -param_agentNameSuffix "-$(Build.BuildNumber)" -param_RunAsAutoLogon false -param_driveLetter C -param_workDirectory ""'
      preferredAzurePowerShellVersion: 5.1.1

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Download Azure Pipelines Artifact and Run Script"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: -DevTestLabName '$(Test.DevTestLabName)' -VirtualMachineName 'SP$(jobSharePointVersion)' -RepositoryName 'Yvand/AzureRM-Templates' -ArtifactName 'windows-vsts-download-and-run-script' -param_vstsProjectUri 'https://dev.azure.com/YvanDev/$(system.teamProject)' -param_buildDefinitionName '$(Build.DefinitionName)' -param_personalAccessToken $(AccessTokenDevOpsYvand) -param_pathToScript 'drop\DevTestLabs\ConfigureLab.ps1' -param_scriptArguments "-pathToPackage ''..\$(system.teamProject)\bin\Release\$(system.teamProject).wsp' -claimsProviderName '$(system.teamProject)' -spTrustName 'contoso.local' -adminUserName 'contoso\yvand' -adminPassword '$(Test.AdminPassword)'"
      preferredAzurePowerShellVersion: 5.1.1

  - task: ms-azuredevtestlabs.tasks.azure-dtl-task-deleteEnvironment.AzureDevTestLabsDeleteEnvironment@1
    displayName: 'Delete Azure DevTest Labs deployed in previous task'
    inputs:
      ConnectedServiceName: '$(Test.AzureConnectionName)'
      LabId: '/subscriptions/$(Test.AzureSubscriptionId)/resourceGroups/YvanDevTests/providers/Microsoft.DevTestLab/labs/YvanDevTests'
      EnvironmentId: '$(BaseEnv.environmentResourceId)'
    enabled: false

- job: ApplyArtifactsSP2016
  condition: and(succeeded(), eq(variables['DevTestLabProvisionSharePoint2016'], 'yes'))
  dependsOn: 
  - Compile
  - CreateTestEnvironment
  displayName: Apply artifacts on SP2016
  timeoutInMinutes: 30
  variables:
    jobSharePointVersion: 2016
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)

  - task: AzurePowerShell@3
    displayName: 'Apply artifact 7-zip'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Public Repo" -ArtifactName "windows-7zip"'
      preferredAzurePowerShellVersion: 5.1.1
    enabled: false

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Azure Pipelines Agent"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Yvand/AzureRM-Templates" -ArtifactName "windows-vsts-build-agent" -param_vstsAccount "YvanDev" -param_vstsPassword "$(AccessTokenDevOpsYvand)" -param_poolName "$(system.teamProject)-DevTestLabs" -param_windowsLogonAccount "contoso\$(Test.AdminUserName)" -param_windowsLogonPassword "$(Test.AdminPassword)" -param_agentName "SP$(jobSharePointVersion)" -param_agentNameSuffix "-$(Build.BuildNumber)" -param_RunAsAutoLogon false -param_driveLetter C -param_workDirectory ""'
      preferredAzurePowerShellVersion: 5.1.1

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Download Azure Pipelines Artifact and Run Script"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: -DevTestLabName '$(Test.DevTestLabName)' -VirtualMachineName 'SP$(jobSharePointVersion)' -RepositoryName 'Yvand/AzureRM-Templates' -ArtifactName 'windows-vsts-download-and-run-script' -param_vstsProjectUri 'https://dev.azure.com/YvanDev/$(system.teamProject)' -param_buildDefinitionName '$(Build.DefinitionName)' -param_personalAccessToken $(AccessTokenDevOpsYvand) -param_pathToScript 'drop\DevTestLabs\ConfigureLab.ps1' -param_scriptArguments "-pathToPackage ''..\$(system.teamProject)\bin\Release\$(system.teamProject).wsp' -claimsProviderName '$(system.teamProject)' -spTrustName 'contoso.local' -adminUserName 'contoso\yvand' -adminPassword '$(Test.AdminPassword)'"
      preferredAzurePowerShellVersion: 5.1.1

  - task: ms-azuredevtestlabs.tasks.azure-dtl-task-deleteEnvironment.AzureDevTestLabsDeleteEnvironment@1
    displayName: 'Delete Azure DevTest Labs deployed in previous task'
    inputs:
      ConnectedServiceName: '$(Test.AzureConnectionName)'
      LabId: '/subscriptions/$(Test.AzureSubscriptionId)/resourceGroups/YvanDevTests/providers/Microsoft.DevTestLab/labs/YvanDevTests'
      EnvironmentId: '$(BaseEnv.environmentResourceId)'
    enabled: false

- job: ApplyArtifactsSP2019
  condition: and(succeeded(), eq(variables['DevTestLabProvisionSharePoint2019'], 'yes'))
  dependsOn: 
  - Compile
  - CreateTestEnvironment
  displayName: Apply artifacts on SP2019
  timeoutInMinutes: 30
  variables:
    jobSharePointVersion: 2019
  pool:
    name: Hosted VS2017
  steps:
  - checkout: none #skip checking out the default repository resource
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)

  - task: AzurePowerShell@3
    displayName: 'Apply artifact 7-zip'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Public Repo" -ArtifactName "windows-7zip"'
      preferredAzurePowerShellVersion: 5.1.1
    enabled: false

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Azure Pipelines Agent"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: '-DevTestLabName "$(Test.DevTestLabName)" -VirtualMachineName "SP$(jobSharePointVersion)" -RepositoryName "Yvand/AzureRM-Templates" -ArtifactName "windows-vsts-build-agent" -param_vstsAccount "YvanDev" -param_vstsPassword "$(AccessTokenDevOpsYvand)" -param_poolName "$(system.teamProject)-DevTestLabs" -param_windowsLogonAccount "contoso\$(Test.AdminUserName)" -param_windowsLogonPassword "$(Test.AdminPassword)" -param_agentName "SP$(jobSharePointVersion)" -param_agentNameSuffix "-$(Build.BuildNumber)" -param_RunAsAutoLogon false -param_driveLetter C -param_workDirectory ""'
      preferredAzurePowerShellVersion: 5.1.1

  - task: AzurePowerShell@3
    displayName: 'Apply artifact "Download Azure Pipelines Artifact and Run Script"'
    inputs:
      azureSubscription: '$(Test.AzureConnectionName)'
      ScriptPath: '$(Build.ArtifactStagingDirectory)\drop\BuildPipeline\DevTestLab_ApplyArtifact.ps1'
      ScriptArguments: -DevTestLabName '$(Test.DevTestLabName)' -VirtualMachineName 'SP$(jobSharePointVersion)' -RepositoryName 'Yvand/AzureRM-Templates' -ArtifactName 'windows-vsts-download-and-run-script' -param_vstsProjectUri 'https://dev.azure.com/YvanDev/$(system.teamProject)' -param_buildDefinitionName '$(Build.DefinitionName)' -param_personalAccessToken $(AccessTokenDevOpsYvand) -param_pathToScript 'drop\DevTestLabs\ConfigureLab.ps1' -param_scriptArguments "-pathToPackage ''..\$(system.teamProject)\bin\Release\$(system.teamProject).wsp' -claimsProviderName '$(system.teamProject)' -spTrustName 'contoso.local' -adminUserName 'contoso\yvand' -adminPassword '$(Test.AdminPassword)'"
      preferredAzurePowerShellVersion: 5.1.1

  - task: ms-azuredevtestlabs.tasks.azure-dtl-task-deleteEnvironment.AzureDevTestLabsDeleteEnvironment@1
    displayName: 'Delete Azure DevTest Labs deployed in previous task'
    inputs:
      ConnectedServiceName: '$(Test.AzureConnectionName)'
      LabId: '/subscriptions/$(Test.AzureSubscriptionId)/resourceGroups/YvanDevTests/providers/Microsoft.DevTestLab/labs/YvanDevTests'
      EnvironmentId: '$(BaseEnv.environmentResourceId)'
    enabled: false

- job: RunTestSP2013
  dependsOn: ApplyArtifactsSP2013
  #dependsOn: Compile
  displayName: Run tests on SP2013
  timeoutInMinutes: 15
  variables:
    jobSharePointVersion: 2013
  pool:
    name: LDAPCP-Tests-2013
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
      itemPattern: |
       drop/LDAPCP.Tests/**
       drop/DevTestLabs/*.csv

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Visual Studio Test Platform Installer'

  - task: VSTest@2
    displayName: 'Run Visual Studio tests'
    inputs:
      searchFolder: '$(System.ArtifactsDirectory)\drop'
      vsTestVersion: toolsInstaller
      runSettingsFile: LDAPCP.Tests/local.runsettings
      overrideTestrunParameters: '-DataFile_AllAccounts_Search "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Search.csv" -DataFile_AllAccounts_Validate "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Validate.csv" -TestSiteCollectionName "LDAPCP.$(Build.BuildNumber)"'
      codeCoverageEnabled: false
      otherConsoleOptions: '/Platform:x64'
      testRunTitle: 'LDAPCP-Tests-SP$(jobSharePointVersion)'
      platform: '$(BuildPlatform)'
      configuration: Release

- job: RunTestSP2016
  dependsOn: ApplyArtifactsSP2016
  #dependsOn: Compile
  displayName: Run tests on SP2016
  timeoutInMinutes: 15
  variables:
    jobSharePointVersion: 2016
  pool:
    name: LDAPCP-Tests-2016
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
      itemPattern: |
       drop/LDAPCP.Tests/**
       drop/DevTestLabs/*.csv

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Visual Studio Test Platform Installer'

  - task: VSTest@2
    displayName: 'Run Visual Studio tests'
    inputs:
      searchFolder: '$(System.ArtifactsDirectory)\drop'
      vsTestVersion: toolsInstaller
      runSettingsFile: LDAPCP.Tests/local.runsettings
      overrideTestrunParameters: '-DataFile_AllAccounts_Search "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Search.csv" -DataFile_AllAccounts_Validate "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Validate.csv" -TestSiteCollectionName "LDAPCP.$(Build.BuildNumber)"'
      codeCoverageEnabled: false
      otherConsoleOptions: '/Platform:x64'
      testRunTitle: 'LDAPCP-Tests-SP$(jobSharePointVersion)'
      platform: '$(BuildPlatform)'
      configuration: Release

- job: RunTestSP2019
  dependsOn: ApplyArtifactsSP2019
  #dependsOn: Compile
  displayName: Run tests on SP2019
  timeoutInMinutes: 15
  variables:
    jobSharePointVersion: 2019
  pool:
    name: LDAPCP-Tests-2019
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
      itemPattern: |
       drop/LDAPCP.Tests/**
       drop/DevTestLabs/*.csv

  - task: VisualStudioTestPlatformInstaller@1
    displayName: 'Visual Studio Test Platform Installer'

  - task: VSTest@2
    displayName: 'Run Visual Studio tests'
    inputs:
      searchFolder: '$(System.ArtifactsDirectory)\drop'
      vsTestVersion: toolsInstaller
      runSettingsFile: LDAPCP.Tests/local.runsettings
      overrideTestrunParameters: '-DataFile_AllAccounts_Search "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Search.csv" -DataFile_AllAccounts_Validate "$(System.ArtifactsDirectory)\drop\DevTestLabs\LDAPCP_Tests_AllAccounts_Validate.csv" -TestSiteCollectionName "LDAPCP.$(Build.BuildNumber)"'
      codeCoverageEnabled: false
      otherConsoleOptions: '/Platform:x64'
      testRunTitle: 'LDAPCP-Tests-SP$(jobSharePointVersion)'
      platform: '$(BuildPlatform)'
      configuration: Release
